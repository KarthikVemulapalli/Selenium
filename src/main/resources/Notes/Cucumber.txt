Framework
	* Execution structure in which automated scripts are executed and maintained.
	* This helps in Run, Maintain and Develop scripts in long term. Helps in code re-usability.
	
	What is Framework?
		In any Real time project whenever Automation scripts are developed, One should come up with an Execution system called framework to run and maintain Automated tests
	What is Cucumber?
		Cucumber is the BDD Framework for running automated tests. 
		Cucumber does not Automate your test cases!
	When my tests are already automated and can run, what cucumber does? 
		Data driven, Parameterization, Execution controls, Hooks, Reports, Automation utilities and many more….
	When you say automated tests, what type of Automation test cases does cucumber Support?
		Any Test (Web, Mobile, API, Unit Testing) which is written in Java/Ruby supported by Cucumber
	How cucumber is unique and Best from other Test Frameworks (Keyword, Data Driven, Hybrid) in the Market?
		Because Test cases/Requirements are defined with on BDD methodology (Gherkin syntax)

BDD Framework (Selenium BDD Cucumber) Setup: 
	1.Create new Maven project
	2.Add 'Cucumber Java' Dependency	: Open 'pom.xml' file, add dependency in the file. Paste the required dependency between <dependencies> structure. If <dependencies> not found create one just above the <project>.
	3.Feature File Creation	 			: Create a 'Features' folder under 'src/test/resources' package. Inside Features folder create a file with '.feature' extension (Feature file).
	4.Install Cucumber Plugin 	 		: After creating feature file a prompt message gets displayed, to install specific plugin to deal with feature file. Install 'Cucumber Eclipse Plugin'. If prompt message not displayed open Eclipse Marketplace and install the mentioned plugin.
	5.Add Content in Feature File		: Add Feature statement. Under Feature statement add Scenarios, steps using Given, When, And , Then...
	6.Create Step Definitions			: Create a 'Step Definition' folder under 'src/test/java' package. Add the required code with approriate class and methods.
	7.Create Test Runner Class			: Create @RunWith and @CucumerOptions in the runner class
	8.Add Dependencies					: 'JUnit' dependency resolves @RunWith & 'Cucumber JUnit' dependency resolves @CucumberOptions. And 'import io.cucumber.junit.Cucumber' to resolve Cucumber.class
		* Required dependencies are Cucumber Java, Cucumber JUnit, JUnit, Selenium Java
	9.Generate Reports					: create reports HTML, JSON, JUNIT/XML.
	10.Run Code							: Run runner class and verify results

Cucumber 
	* It is BDD (Behaviour Driven Development) framework for executing Automated scripts.
	* It is not a testing tool, it is type of Framework under BDD.
	* Supports any tests (i.e. Mobile, Web, API, Unit) which are written in Java/Ruby.
	* Tests are defined in BDD methodology (Gherkin Syntax)
	
Cucumber Installation:
	1.Install JDK in the system.
	2.Create Java environment variables in the system.
	3.Install Eclipse (or any IDE)
	4.Configure Eclipse with Java (JDK)
	5.Install 'natural' plugin using eclipse marketplace.
	6.Create a Maven project (QuickStart archetype)
	7.Install Cucumber dependencies 'cucumber-java', 'cucumber-testng', 'cucumber-junit'
	8.Install Cucumbe

Gherkin (Business Readable/Domain Specific Language)
	* Language to describe Software Behaviour/Test Case.
	* Written in simple language, can be easily understable by Business folks.
	* Keywords used are 
		Scenario, Feature, Feature File, Scenario Outline, Step Definition.
	
	Scenario: 
		* Test cases are represented as Scenarios in Cucumber. 
		* It contains steps with use of keywords (i.e. Given, When, Then, And, But all are case-sensitive)
			Given 	- Mentions pre-conditions
			When 	- Mentions user actions
			Then 	- Describes expected output
			And 	- Used for positive statements that are addition to previous steps
			But 	- Used for negative statements that are addition to previous steps
	Feature (.feature) :
		* Feature actually conveys the business requirement.
		* Feature file acts as a Test Suite which consists of all Scenarios.
	Step Definition	(.java file):
		* Functionality Code is written.
	Scenario Outline
		* Used during parameterization.

	TidyGherkin Plugin to generate StepDefinitions
		* To generate feature file steps into StepDefinition java code, we can use TidyGherkin. Install this plugin in chrome browser. By using 'chrome://apps' we can access it and paste the Gherkin steps and select JavaSteps option. This will give you all the java methods for that feature file.    

	* There should be single mapping implementation for each Gherkin line
	
	Execute Feature & StepDefinitions files using JUnit/TestNG testrunner
		* Execution using JUnit TestRunner - @RunWith(Cucumber.class)
		* @CucumberOptions accepts two parameters, features & glue.
			* features	- provide the complete path where feature files are present
			* glue 		- provide the package name where step definition files are present. Make sure TestRunner and StepDefinitions package have same parent package (not mandatory).
		* Execution using TestNG TestRunner - we need to extends TestNG TestRunner class with 'AbstractTestNGCucumberTests' class from cucumber-testng jar.
		
	* Note: Few CucumberOptions parameters are not same in both JUnit & TestNG. Example: stepNotifications is not present in TestNG


Cucumber Features:
	1. Parameterization 			- Same code can be used for multiple scenarios of different data.
	2. DataTable 					- Send multiple data without specifying all the parameters.
		* Method should accept 'DataTable' as argument
		* Inside code 'List<List<String>> TableData = DataTableParameter.asLists();'. This DataTableParameter contains data passed in feature file. 
	3. Examples (Scenario Outline) 	- Using Examples keyword, we can pass different sets of data to parameters specified in code.
	4. Tags 						- Segregating scenarios into groups and execute them based on requirement.
	5. Background 					- Prerequisite code to be executed before every scenario in that particular feature file.
		* Feature file can have only one Background block.
		* This Background can be implemented only when all the mentioned scenarios in that feature file have common prerequisite.
	6. Hooks: Only two hooks i.e. Before, After
		* Hooks are blocks of code that can run at various points in the Cucumber execution cycle.
		* Annotations are used in StepDefinition file using tags like '@Before("@TagName")'. Before annotation executes before every scenario with specific tag.
		* Example: In case a scenario has two tags. Example @Reg & @Smoke
			1. If @Reg tag is called in testRunner.
			2. Both @Before("@Smoke") and @Before("@Reg") gets executed.
			3. The execution order will be in the order tags are mentioned.
			4. In this example the @Reg is written first, so @Before("@Reg") executes first and then @Before("@Smoke") executes
			5. Similarly @After("@Reg") executes first and then @After("@Smoke") executes
	7. Execution through MVN
		* Run the below in cmd, we can execute without using eclipse
			mvn test
	8. Reports: 
		1. Add external plugin for reporting 'damianszczepanik/mvn-cucumber-reporting'.
			This mvn-cucumber-reporting plugin takes json report files as input and provide html reports as output. 
		2. Add 'plugin' parameter in @CucumberOptions. To get json report files.
			plugin = {"pretty", "html:target/cucumber-json-reports"}
			plugin = {"pretty", "json:target/cucumber-json-reports"}
		3. Add input & output directory in pom.xml file
		4. Output html files are saved in 'target/cucumber-html-reports' folder
		5. The html reports will get only generated in 'mvn verify' phase.
	
	* When both Hooks and Background are used, hooks will be executed first.  Hooks has more priority than Background.
	* When multiple hooks, the tag which is first mentioned in a scenario. That Hook will be executed first.
	* If no tags mentioned in Before/After hook. They will be applied to all scenarios.

